import random
from datetime import datetime
import json
import boto3
import time
# import copy
from threading import Thread, Lock
# from round_robin import read_and_delete, round_robin
from queue import Queue
import random as r





sqs = boto3.client("sqs")
queue_url = "https://sqs.us-east-1.amazonaws.com/292274580527/sqs_cc106_team_3"
who = "almaraz"


def get_number_messages():
    queue_attr = sqs.get_queue_attributes(
        QueueUrl=queue_url,
        AttributeNames=['ApproximateNumberOfMessages'])
    return int(queue_attr["Attributes"]["ApproximateNumberOfMessages"])


def generate_tacos(n):
    type = ["taco", "quesadilla"]
    meat = ["asada", "adobada", "suadero", "tripa", "cabeza"]
    fillings = ["cebolla", "cilantro", "salsa", "guacamole"]
    # Imprimire cuantas ordenes voy a meter
    print(f" >>>>>>>>INSERTING {n} TACO ORDERS<<<<<<<<<<< ")
    for x in range(n):
        taco = {
            "datetime": str(datetime.now()),
            "request_id": x,
            "status": "open",
            "orden": []
        }
        for y in range(random.randint(1,2)):
            taco["orden"].append(
                {
                    "part_id": "{0}-{1}".format(x, y),
                    "type": random.choice(type),
                    "meat": random.choice(meat),
                    "status": "open",
                    "quantity": random.randint(1,3),
                    "ingredients": []
                }
            )
            local_fillings = fillings.copy()
            for z in range(random.randint(1,len(local_fillings))):
                ind_filling = random.choice(local_fillings)
                taco["orden"][y]["ingredients"].append(ind_filling)
                local_fillings.remove(ind_filling)
        print(taco)

        sqs.send_message(QueueUrl=queue_url, MessageBody=(json.dumps(taco)))
    print(f" >>>>>>>> INSERTED {n} TACO ORDERS<<<<<<<<<<< ")

def get_carne():
    pass

def preparar_tacos(taquero):
    pass


def dump():
    while True:
        response = sqs.receive_message(QueueUrl=queue_url)
        message = response['Messages']
        # Body lo pasa como string, pero al ser un diccionario, le tenemos que retirar los parentesis para que sea dictionary... -2hr
        body = message[0]["Body"]
        orden = json.loads(body)
        print(orden)
        orden = orden["orden"]
        print(f"Mensaje >>> {message}\nBody >>     {body}\nOrden >     {orden}")
        print(f"\t\tRestantes = {get_number_messages()}")




mutex = Lock()


def init():
    global fillings
    adobada = Thread()


generate_tacos(20)
# time.sleep(10)
# dump()
# # round_robin()
#
# while (True):
#     var = read_and_delete()
#     if var == None:
#         break
# round_robin()
# time.sleep(20)
numberItems = sqs.get_queue_attributes(QueueUrl=queue_url, AttributeNames=["All"])
print(numberItems['Attributes'])
